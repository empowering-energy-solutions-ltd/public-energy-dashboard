{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Energy Dashboard","text":"<p>The energy systems performance dashboard assesses gas and electricity consumption and invoice data to help site managers have a clearer understanding of their energy consumption &amp; spend.</p> <p>This can be locally run by going to <code>main.py</code> and running the script (username and passwords are at the begining of the <code>main.py</code> file).</p> <p>If you want to upload your own sites data to be visualised you can find examples of the various input data types in <code>src &gt; data</code>.</p> <p>The current version has 4 tabs:</p> <ol> <li> <p>Overview - This take contains a sankey diagram of the site's energy system. This can be altered by changing the sankey data in the <code>src.utils.schema.py</code> and <code>src.components.summary_plots.py</code>. The tab also has a table and line plot of the year on year energy consumption of the site with the table also showing the min, max and mean values for each months energy consumption.</p> </li> <li> <p>Power - This tab holds a load duration curve that highlights the sites power demand usage, ensure you update the <code>POWER_LIMS</code> variable in <code>src.componenets.power_plots.py</code> if using on personal data so that the power demand limit is updated for your meters. There is also a peak demand table and lineplot that highglights the top 10 biggest power demand peaks in the dataset, or filtered dataset. This is designed to help site managers identify potential periods of repeated high demand to try and avoid more in future.</p> </li> <li> <p>Consumption - This tab holds a baseline plot highlighting the average baseload consumption (default is monthly baseload), and a lineplot and table highlighting off hours of high consumption. This is designed to help site managers identify periods outside of normal operating hours that are exibiting unusually high consumption. Ensure you update the <code>WORK_HOURS</code> dict in <code>src.components.consumption_plots.py</code> to your specific site opening hours to ensure accruate results.</p> </li> <li> <p>Cost - The cost tab is unfinished but currently shows the breakdown of energy bills in either cost (\u00a3) or as a percentage of the bill. This is helpful to see the breakdown of energy bills over time. In the example data plot, you'll notice that standing charges rise quite significantly against other percentage parts of the bill.</p> </li> </ol>"},{"location":"reference/components/","title":"Index","text":""},{"location":"reference/components/consumption_plots/","title":"Consumption plots","text":""},{"location":"reference/components/consumption_plots/#components.consumption_plots.create_baselines","title":"<code>create_baselines(dataf, target_col='All')</code>","text":"<p>This function creates the annual, seasonal and monthly baselines from the data.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The data to be used for the baselines.</p> required <code>target_col</code> <code>str</code> <p>The column to be used for the baselines. Defaults to 'All'.</p> <code>'All'</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The data with the annual, seasonal and monthly baselines.</p>"},{"location":"reference/components/consumption_plots/#components.consumption_plots.create_consumption_lineplot","title":"<code>create_consumption_lineplot(data, selected_meter_id, selected_baseline, selected_date)</code>","text":"<p>This uses the create_lower_lineplot function to create the high consumption   lineplot and adds a horizontal line to the plot at the selected baseline value.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>The data to be plotted.</p> required <code>selected_meter_id</code> <code>Any</code> <p>The meter mpr to be plotted.</p> required <code>selected_baseline</code> <code>str</code> <p>The baseload to be plotted [monthly, seasonal, annually].</p> required <code>selected_date</code> <code>datetime</code> <p>The date to be plotted (the peak consumption period +- 3 days).</p> required <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: The lineplot with the horizontal line at the selected baseline value.</p>"},{"location":"reference/components/consumption_plots/#components.consumption_plots.create_high_demand_table","title":"<code>create_high_demand_table(df, target_col='All')</code>","text":"<p>This function creates a table of the top 10 peak consumption periods.   The dates are also used for the callback to update the lineplot.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>The data to be used for the table.</p> required <code>target_col</code> <code>str</code> <p>The column to be used for the peak consumption. Defaults to 'All'.</p> <code>'All'</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The top 10 peak consumption periods.</p>"},{"location":"reference/components/consumption_plots/#components.consumption_plots.new_baseline_barplot","title":"<code>new_baseline_barplot(dataf, target_col, baseline='Monthly')</code>","text":"<p>This function creates a barplot of the annual, seasonal or monthly baselines.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The data to be used for the barplot.</p> required <code>target_col</code> <code>str</code> <p>The column to be used for the baselines.</p> required <code>baseload</code> <code>str</code> <p>The baseline to be plotted [monthly, seasonal, annually]. Defaults to 'Monthly'.</p> required <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: The barplot of the annual, seasonal or monthly baselines.</p>"},{"location":"reference/components/consumption_plots/#components.consumption_plots.new_consump_periods","title":"<code>new_consump_periods(data, target_col, baseline_type='Monthly')</code>","text":"<p>This function generates the top 10 peak consumption period dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>The data to be used for the table.</p> required <code>target_col</code> <code>str</code> <p>The column to be used for the peak consumption.</p> required <code>baseline_type</code> <code>str</code> <p>The baseline to be used for the percentage above baseline. Defaults to 'Monthly'.</p> <code>'Monthly'</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The top 10 peak consumption periods.</p>"},{"location":"reference/components/cost_plots/","title":"Cost plots","text":""},{"location":"reference/components/cost_plots/#components.cost_plots.create_cost_lineplot","title":"<code>create_cost_lineplot(data, val_type, target_id='All')</code>","text":"<p>Creates a line plot for invoice cost breakdown.   Figure can be filtered by MPR and viewed as either % or actual \u00a3. </p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>Dataframe containing invoice cost breakdown.</p> required <code>val_type</code> <code>str</code> <p>Type of value to be plotted. Either 'Percentage of total bill (%)' or 'Cost [\u00a3]'.</p> required <code>target_id</code> <code>str</code> <p>MPR to filter data by. Defaults to 'All'.</p> <code>'All'</code> <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: Plotly figure object.</p>"},{"location":"reference/components/cost_plots/#components.cost_plots.generate_consump_duos_tabe","title":"<code>generate_consump_duos_tabe()</code>","text":"<p>Creates static table for consumption and DUoS charges   across the day.</p> <p>NOT CURRENTLY IN USE</p>"},{"location":"reference/components/cost_plots/#components.cost_plots.generate_duos_table","title":"<code>generate_duos_table()</code>","text":"<p>Creates static table for Day, Night &amp; DUoS charges.  NOT CURRENTLY IN USE</p>"},{"location":"reference/components/filter_objects/","title":"Filter objects","text":""},{"location":"reference/components/filter_objects/#components.filter_objects.box_options","title":"<code>box_options(lst_objects, padding='10px', width='49%')</code>","text":"<p>Returns a html.Div with a border and padding to contain the list of dropdown objects passed to it. </p> <p>Parameters:</p> Name Type Description Default <code>lst_objects</code> <code>list[Div]</code> <p>List of dropdown objects to be contained in the box.</p> required <code>padding</code> <code>str</code> <p>Padding for the box. Defaults to '10px'.</p> <code>'10px'</code> <code>width</code> <code>str</code> <p>Width of the box. Defaults to '49%'.</p> <code>'49%'</code> <p>Returns:</p> Type Description <code>Div</code> <p>html.Div: Div containing the list of dropdown objects.</p>"},{"location":"reference/components/filter_objects/#components.filter_objects.create_dropdown","title":"<code>create_dropdown(tab_title, text, dropdown_options, section_no)</code>","text":"<p>Creates a html.Div with a dropdown component and a title to describe the dropdown. </p> <p>Parameters:</p> Name Type Description Default <code>tab_title</code> <code>str</code> <p>Title of the tab the dropdown will be used in.</p> required <code>text</code> <code>str</code> <p>Title of the dropdown.</p> required <code>dropdown_options</code> <code>list[Any]</code> <p>List of options for the dropdown.</p> required <code>section_no</code> <code>int</code> <p>Section number of the dropdown.</p> required <p>Returns:</p> Type Description <code>Div</code> <p>html.Div: Div containing the dropdown and title.</p>"},{"location":"reference/components/filter_objects/#components.filter_objects.create_radioitem","title":"<code>create_radioitem(tab_title, options, item_title=None, id_int=None)</code>","text":"<p>Creates a html.Div with a radioitem component and a title to describe the radioitem. </p> <p>Parameters:</p> Name Type Description Default <code>tab_title</code> <code>str</code> <p>Title of the tab the radioitem will be used in.</p> required <code>options</code> <code>list[str]</code> <p>List of options for the radioitem.</p> required <code>item_title</code> <code>Optional[str]</code> <p>Title of the radioitem. Defaults to None.</p> <code>None</code> <code>id_int</code> <code>Optional[int]</code> <p>ID of the radioitem. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Div</code> <p>html.Div: Div containing the radioitem and title.</p>"},{"location":"reference/components/filter_objects/#components.filter_objects.create_sliders","title":"<code>create_sliders(tab_title, options, static)</code>","text":"<p>Creates a html.Div with a slider component and a title to describe the slider. </p> <p>Parameters:</p> Name Type Description Default <code>tab_title</code> <code>str</code> <p>Title of the tab the slider will be used in.</p> required <code>options</code> <code>list[float]</code> <p>List of options for the slider.</p> required <code>static</code> <code>bool</code> <p>Whether the slider is static or not.</p> required <p>Returns:</p> Type Description <code>Div</code> <p>html.Div: Div containing the slider and title.</p>"},{"location":"reference/components/gen_content_obj/","title":"Gen content obj","text":""},{"location":"reference/components/gen_content_obj/#components.gen_content_obj.add_hline","title":"<code>add_hline(fig, y_val, name)</code>","text":"<p>Adds a horizontal line to a plotly figure.</p> <p>Parameters:</p> Name Type Description Default <code>fig</code> <code>Figure</code> <p>The plotly figure to add the line to.</p> required <code>y_val</code> <code>int</code> <p>The y value of the line.</p> required <code>name</code> <code>str</code> <p>The name of the line.</p> required <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: The plotly figure with the line added.</p>"},{"location":"reference/components/gen_content_obj/#components.gen_content_obj.add_x_range_box_to_legend","title":"<code>add_x_range_box_to_legend(fig, x_start, x_end, name)</code>","text":"<p>Adds a box to the legend of a plotly figure.</p> <p>Parameters:</p> Name Type Description Default <code>fig</code> <code>Figure</code> <p>The plotly figure to add the box to.</p> required <code>x_start</code> <code>int</code> <p>The start x value of the box.</p> required <code>x_end</code> <code>int</code> <p>The end x value of the box.</p> required <code>name</code> <code>str</code> <p>The name of the box.</p> required <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: The plotly figure with the box added.</p>"},{"location":"reference/components/gen_content_obj/#components.gen_content_obj.generate_style_conditions","title":"<code>generate_style_conditions()</code>","text":"<p>Style conditions for the Ag-Grid table. NOT IN USE.</p>"},{"location":"reference/components/gen_content_obj/#components.gen_content_obj.graph_obj","title":"<code>graph_obj(tab_title, figure, id=0)</code>","text":"<p>Puts a plotly figure into a dcc.Graph object with an ID so that it can be   identified by the callbacks.</p> <p>Parameters:</p> Name Type Description Default <code>tab_title</code> <code>str</code> <p>The title of the tab used in the id generation.</p> required <code>figure</code> <code>Figure</code> <p>The plotly figure to be displayed.</p> required <code>id</code> <code>int</code> <p>The id of the figure. Defaults to 0.</p> <code>0</code> <p>Returns:</p> Type Description <code>Div</code> <p>html.Div: The dcc.Graph object to be displayed.</p>"},{"location":"reference/components/gen_content_obj/#components.gen_content_obj.table_obj","title":"<code>table_obj(tab_title, data, id=0, page_fit='responsiveSizeToFit', colour=False, pinned_val=False)</code>","text":"<p>Generates Ag-Grid table object with ID and formatting.</p> <p>Parameters:</p> Name Type Description Default <code>tab_title</code> <code>str</code> <p>The title of the tab used in the id generation.</p> required <code>data</code> <code>DataFrame</code> <p>The data to be displayed in the table.</p> required <code>id</code> <code>int</code> <p>The id of the table. Defaults to 0.</p> <code>0</code> <code>page_fit</code> <code>Optional[str]</code> <p>The page fit of the table. Defaults to \"responsiveSizeToFit\".</p> <code>'responsiveSizeToFit'</code> <code>colour</code> <code>bool</code> <p>Whether to colour the table. Defaults to False.</p> <code>False</code> <code>pinned_val</code> <code>bool</code> <p>Whether to pin the first column. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>Div</code> <p>html.Div: The Ag-Grid table object to be displayed.</p>"},{"location":"reference/components/layout/","title":"Layout","text":""},{"location":"reference/components/layout/#components.layout.create_layout","title":"<code>create_layout(app)</code>","text":"<p>Create the layout for the app.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>Dash</code> <p>Dash app object.</p> required <p>Returns:</p> Type Description <code>Div</code> <p>html.Div: Div containing the layout for the app.</p>"},{"location":"reference/components/line_fig/","title":"Line fig","text":""},{"location":"reference/components/line_fig/#components.line_fig.MetaData","title":"<code>MetaData</code>","text":"<p>             Bases: <code>Protocol</code></p> <p>MetaData Protocol for type hinting.</p>"},{"location":"reference/components/line_fig/#components.line_fig.create_lower_lineplot","title":"<code>create_lower_lineplot(data, target_col, page, metadata=None, working_hours=None)</code>","text":"<p>Generates the lower lineplots on both the Power &amp; Consumption tabs.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>The data to be plotted.</p> required <code>target_col</code> <code>str</code> <p>The column to be plotted.</p> required <code>page</code> <code>str</code> <p>The page to be plotted.</p> required <code>metadata</code> <code>MetaData</code> <p>The metadata for the data. Defaults to None.</p> <code>None</code> <code>working_hours</code> <code>dict[str, dict[str, time]]</code> <p>The working hours for the data. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: The plotly figure.</p>"},{"location":"reference/components/line_fig/#components.line_fig.new_create_overview_lineplot","title":"<code>new_create_overview_lineplot(data, target_col='All')</code>","text":"<p>Generates the monthly line plot for the overview tab split across years.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>The data to be plotted.</p> required <code>target_col</code> <code>str</code> <p>The column to be plotted. Defaults to 'All'.</p> <code>'All'</code> <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: The plotly figure.</p>"},{"location":"reference/components/line_fig/#components.line_fig.numeric_to_month_name","title":"<code>numeric_to_month_name(month_number)</code>","text":"<p>Converts a numeric month to its name.</p> <p>Parameters:</p> Name Type Description Default <code>month_number</code> <code>int</code> <p>The numeric month.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The name of the month.</p>"},{"location":"reference/components/power_plots/","title":"Power plots","text":""},{"location":"reference/components/power_plots/#components.power_plots.create_high_demand_table","title":"<code>create_high_demand_table(df, target_col='98765')</code>","text":"<p>Creates a table of the top 10 peak power demand periods for the selected meter.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>The data to be used.</p> required <code>target_col</code> <code>str</code> <p>The column to be used. Defaults to '98765'.</p> <code>'98765'</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The table of the top 10 peak power demand periods.</p>"},{"location":"reference/components/power_plots/#components.power_plots.create_power_lineplot","title":"<code>create_power_lineplot(peak_date, target_id)</code>","text":"<p>Uses the line_fig module to create a line plot of the power demand from the half-hourly data.</p> <p>Parameters:</p> Name Type Description Default <code>peak_date</code> <code>datetime</code> <p>The date of the peak power demand.</p> required <code>target_id</code> <code>str</code> <p>The meter ID of the selected meter.</p> required <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: Plotly figure object.</p>"},{"location":"reference/components/power_plots/#components.power_plots.power_demand_overview","title":"<code>power_demand_overview(df)</code>","text":"<p>Creates a table of the power demand statistics for each meter. With columns for the minimum, 25th percentile, median, 75th percentile, peak and percentage of the limit.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>The data to be used.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The table of power demand statistics for each meter.</p>"},{"location":"reference/components/power_plots/#components.power_plots.power_load_duration_curve","title":"<code>power_load_duration_curve(dataf, target_col='98765')</code>","text":"<p>Creates a load duration curve for the selected meter.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The data to be used.</p> required <code>target_col</code> <code>str</code> <p>The column to be used. Defaults to '98765'.</p> <code>'98765'</code> <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: Plotly figure object.</p>"},{"location":"reference/components/sidebar/","title":"Sidebar","text":""},{"location":"reference/components/sidebar/#components.sidebar.get_sidebar","title":"<code>get_sidebar(app)</code>","text":"<p>Create the sidebar for the app.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>Dash</code> <p>Dash app object.</p> required <p>Returns:</p> Name Type Description <code>Component</code> <code>Component</code> <p>Sidebar for the app.</p>"},{"location":"reference/components/submeter_plots/","title":"Submeter plots","text":""},{"location":"reference/components/submeter_plots/#components.submeter_plots.create_table_data","title":"<code>create_table_data(dataf, highflat)</code>","text":"<p>Creates a table of the average monthly consumption and cost for the selected flats.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The data to be used.</p> required <code>highflat</code> <code>[str]</code> <p>The selected flats.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The table of the average monthly consumption and cost.</p>"},{"location":"reference/components/submeter_plots/#components.submeter_plots.generate_area_plot","title":"<code>generate_area_plot()</code>","text":"<p>Generates an area plot of the flat consumption as a percentage of the total.</p> <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: Plotly figure object.</p>"},{"location":"reference/components/summary_plot/","title":"Summary plot","text":""},{"location":"reference/components/summary_plot/#components.summary_plot.calculate_statistics","title":"<code>calculate_statistics(month_data, no_years, units)</code>","text":"<p>Calculates the current, most recent, median, minimum and maximum values for the selected month.</p> <p>Parameters:</p> Name Type Description Default <code>month_data</code> <code>DataFrame</code> <p>The data for the selected month.</p> required <code>no_years</code> <code>int</code> <p>The number of years of data.</p> required <code>units</code> <code>str</code> <p>The units to be used.</p> required <p>Returns:</p> Type Description <code>tuple[Any, Any, Any, Any, Any]</code> <p>tuple[Any, Any, Any, Any, Any]: The current, most recent, median, minimum and maximum values.</p>"},{"location":"reference/components/summary_plot/#components.summary_plot.create_summary_table","title":"<code>create_summary_table(df_monthly, table_units='Energy', target_col='All')</code>","text":"<p>Creates a table of the monthly statistics for the selected meter.</p> <p>Parameters:</p> Name Type Description Default <code>df_monthly</code> <code>DataFrame</code> <p>The monthly data.</p> required <code>table_units</code> <code>str</code> <p>The units to be used. Defaults to 'Energy'.</p> <code>'Energy'</code> <code>target_col</code> <code>str</code> <p>The column to be used. Defaults to 'All'.</p> <code>'All'</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The table of the monthly statistics.</p>"},{"location":"reference/components/summary_plot/#components.summary_plot.overview_sankey","title":"<code>overview_sankey()</code>","text":"<p>Creates a Sankey diagram of the energy flows. Check the Sankey schemas to switch to a different layout.</p> <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: Plotly figure object.</p>"},{"location":"reference/data/","title":"Index","text":""},{"location":"reference/data/loader/","title":"Loader","text":""},{"location":"reference/data/loader/#data.loader.load_duos_data","title":"<code>load_duos_data()</code>","text":"<p>Loads the generated DUOS data from the csv file.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The DUOS data.</p>"},{"location":"reference/data/loader/#data.loader.load_elec_invoice_data","title":"<code>load_elec_invoice_data()</code>","text":"<p>Pulls and formats the electricity invoice data from the csv file.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The formatted electricity invoice data.</p>"},{"location":"reference/data/loader/#data.loader.load_gas_invoice_data","title":"<code>load_gas_invoice_data()</code>","text":"<p>Pulls and formats the gas invoice data from the csv file.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The formatted gas invoice data.</p>"},{"location":"reference/data/loader/#data.loader.load_hh_data","title":"<code>load_hh_data(resample, utility=schema.PageSchema.ELEC)</code>","text":"<p>Loads the half hourly data for the given utility and resamples it if required.</p> <p>Parameters:</p> Name Type Description Default <code>resample</code> <code>Optional[str]</code> <p>The resampling frequency.</p> required <code>utility</code> <code>str</code> <p>The utility type. Defaults to schema.PageSchema.ELEC.</p> <code>ELEC</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The half hourly data.</p>"},{"location":"reference/data/loader/#data.loader.load_invoice_cost_data","title":"<code>load_invoice_cost_data(energy_type)</code>","text":"<p>Loads the invoice cost data for the given energy type.</p> <p>Parameters:</p> Name Type Description Default <code>energy_type</code> <code>str</code> <p>The energy type.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The invoice cost data.</p>"},{"location":"reference/data/loader/#data.loader.prep_gas_data","title":"<code>prep_gas_data()</code>","text":"<p>Formats the half hourly gas data from Total and returns a DataFrame.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The formatted half hourly gas data.</p>"},{"location":"reference/data/metadata/","title":"Metadata","text":""},{"location":"reference/data/metadata/#data.metadata.generate_consump_metadata","title":"<code>generate_consump_metadata()</code>","text":"<p>Generate the metadata for the consumption data.</p> <p>Returns:</p> Type Description <code>MetaData</code> <p>sdp.MetaData: The metadata for the consumption data.</p>"},{"location":"reference/data/metadata/#data.metadata.generate_duos_metadata","title":"<code>generate_duos_metadata()</code>","text":"<p>Generate the metadata for the DUOS data.</p> <p>Returns:</p> Type Description <code>MetaData</code> <p>sdp.MetaData: The metadata for the DUOS data.</p>"},{"location":"reference/data/metadata/#data.metadata.generate_flat_metadata","title":"<code>generate_flat_metadata()</code>","text":"<p>Generate the metadata for the flat data.</p> <p>Returns:</p> Type Description <code>MetaData</code> <p>sdp.MetaData: The metadata for the flat data.</p>"},{"location":"reference/data/metadata/#data.metadata.generate_price_metadata","title":"<code>generate_price_metadata()</code>","text":"<p>Generate the metadata for the price data.</p> <p>Returns:</p> Type Description <code>MetaData</code> <p>sdp.MetaData: The metadata for the price data.</p>"},{"location":"reference/tabs/","title":"Index","text":""},{"location":"reference/tabs/consumption_tab/","title":"Consumption tab","text":""},{"location":"reference/tabs/consumption_tab/#tabs.consumption_tab.render","title":"<code>render()</code>","text":"<p>Renders the consumption tab.</p> <p>Returns:</p> Type Description <code>Div</code> <p>html.Div: Div containing the layout for the consumption tab.</p>"},{"location":"reference/tabs/consumption_tab/#tabs.consumption_tab.selected_ooo_consumption_points","title":"<code>selected_ooo_consumption_points(n, table_data_selected)</code>","text":"<p>Returns the selected table data as a string.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>bool</code> <p>The number of clicks.</p> required <code>table_data_selected</code> <code>list[dict[str, str]]</code> <p>The selected table data.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The selected table data as a string.</p>"},{"location":"reference/tabs/consumption_tab/#tabs.consumption_tab.update_consump_lineplot","title":"<code>update_consump_lineplot(selected_date, selected_baseline, selected_meter_id)</code>","text":"<p>Updates the consumption line plot based on the selected date, baseline and meter.</p> <p>Parameters:</p> Name Type Description Default <code>selected_date</code> <code>datetime</code> <p>The selected date.</p> required <code>selected_baseline</code> <code>str</code> <p>The selected baseline.</p> required <code>selected_meter_id</code> <code>str</code> <p>The selected meter.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The consumption line plot.</p>"},{"location":"reference/tabs/consumption_tab/#tabs.consumption_tab.update_dropdown","title":"<code>update_dropdown(energy_type)</code>","text":"<p>Updates the dropdown options based on the energy type selected.</p> <p>Parameters:</p> Name Type Description Default <code>energy_type</code> <code>str</code> <p>The selected energy type.</p> required <p>Returns:</p> Type Description <code>tuple[list[dict[str, str]], str]</code> <p>tuple[list[dict[str, str]], str]: The dropdown options and the default value.</p>"},{"location":"reference/tabs/consumption_tab/#tabs.consumption_tab.update_peak_dropdown_options","title":"<code>update_peak_dropdown_options(table_data)</code>","text":"<p>Updates the peak dropdown options based on the table data.</p> <p>Parameters:</p> Name Type Description Default <code>table_data</code> <code>list[dict[str, Any]]</code> <p>The table data.</p> required <p>Returns:</p> Type Description <code>list[dict[str, str]]</code> <p>list[dict[str, str]]: The peak dropdown options.</p>"},{"location":"reference/tabs/consumption_tab/#tabs.consumption_tab.update_table_and_barplot","title":"<code>update_table_and_barplot(selected_years, target_col, utility, baseline_type)</code>","text":"<p>Updates the table and bar plot based on the selected years, meter and baseline type.</p> <p>Parameters:</p> Name Type Description Default <code>selected_years</code> <code>list[int]</code> <p>The selected years.</p> required <code>target_col</code> <code>str</code> <p>The selected meter.</p> required <code>utility</code> <code>str</code> <p>The selected utility.</p> required <code>baseline_type</code> <code>str</code> <p>The selected baseline type.</p> required <p>Returns:</p> Type Description <code>tuple[list[dict[str, Any]], Any]</code> <p>tuple[list[dict[str, Any]], Any]: The table data and the bar plot.</p>"},{"location":"reference/tabs/cost_tab/","title":"Cost tab","text":""},{"location":"reference/tabs/cost_tab/#tabs.cost_tab.render","title":"<code>render()</code>","text":"<p>Renders the cost tab.</p> <p>Returns:</p> Type Description <code>Div</code> <p>html.Div: Div containing the layout for the cost tab.</p>"},{"location":"reference/tabs/cost_tab/#tabs.cost_tab.selected_duos_d_n_table","title":"<code>selected_duos_d_n_table(n, table_data_selected)</code>","text":"<p>Returns the selected rows from the table as a string.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>bool</code> <p>The number of clicks.</p> required <code>table_data_selected</code> <code>list[dict[str, str]]</code> <p>The selected rows from the table.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The selected rows as a string.</p>"},{"location":"reference/tabs/cost_tab/#tabs.cost_tab.selected_other_table","title":"<code>selected_other_table(n, table_data_selected)</code>","text":"<p>Returns the selected rows from the table as a string.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>bool</code> <p>The number of clicks.</p> required <code>table_data_selected</code> <code>list[dict[str, str]]</code> <p>The selected rows from the table.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The selected rows as a string.</p>"},{"location":"reference/tabs/cost_tab/#tabs.cost_tab.update_dropdown","title":"<code>update_dropdown(energy_type)</code>","text":"<p>Updates the dropdown options based on the energy type selected.</p> <p>Parameters:</p> Name Type Description Default <code>energy_type</code> <code>str</code> <p>The selected energy type.</p> required <p>Returns:</p> Type Description <code>tuple[list[dict[str, str]], str]</code> <p>tuple[list[dict[str, str]], str]: The dropdown options and the default value.</p>"},{"location":"reference/tabs/cost_tab/#tabs.cost_tab.update_fig","title":"<code>update_fig(energy_type, meter_id, value_type, selected_years)</code>","text":"<p>Updates the figure based on the selected filters.</p> <p>Parameters:</p> Name Type Description Default <code>energy_type</code> <code>str</code> <p>The energy type selected.</p> required <code>meter_id</code> <code>str</code> <p>The meter ID selected.</p> required <code>value_type</code> <code>str</code> <p>The value type selected.</p> required <code>selected_years</code> <code>list[int]</code> <p>The selected years.</p> required <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: Plotly figure object.</p>"},{"location":"reference/tabs/general_tab/","title":"General tab","text":""},{"location":"reference/tabs/general_tab/#tabs.general_tab.generate_page","title":"<code>generate_page</code>  <code>dataclass</code>","text":"<p>Class for generating a uniform tab structure.</p> <p>Attributes:</p> Name Type Description <code>section_title</code> <code>str</code> <p>Title of the section.</p> <code>section_number</code> <code>int</code> <p>Number of the section.</p> <code>section_text</code> <code>str</code> <p>Text for the section.</p> <code>filter_obj</code> <code>Optional[list[Div]]</code> <p>List of filter objects for the section.</p> <code>chart_table_1</code> <code>Optional[Div]</code> <p>First chart or table for the section.</p> <code>chart_table_2</code> <code>Optional[Div]</code> <p>Second chart or table for the section.</p> <p>Methods:</p> Name Description <code>create_splitter</code> <p>Creates a horizontal rule.</p> <code>format_title</code> <p>Formats the title of the section.</p> <code>format_text</code> <p>Formats the text of the section.</p> <code>format_filter_objs</code> <p>Formats the filter objects for the section.</p> <code>format_first_display</code> <p>Formats the first chart or table for the section.</p> <code>format_second_display</code> <p>Formats the second chart or table for the section.</p> <code>render_section</code> <p>Renders the section.</p>"},{"location":"reference/tabs/general_tab/#tabs.general_tab.generate_page.create_splitter","title":"<code>create_splitter()</code>","text":"<p>Creates a horizontal line to split sections</p> <p>Returns:</p> Type Description <code>Hr</code> <p>html.Hr: Horizontal line.</p>"},{"location":"reference/tabs/general_tab/#tabs.general_tab.generate_page.format_filter_objs","title":"<code>format_filter_objs()</code>","text":"<p>Formats the filter objects for the section.</p> <p>Returns:</p> Type Description <code>Div</code> <p>html.Div: Div containing the filter objects for the section.</p>"},{"location":"reference/tabs/general_tab/#tabs.general_tab.generate_page.format_first_display","title":"<code>format_first_display()</code>","text":"<p>Formats the first chart or table for the section.</p> <p>Returns:</p> Type Description <code>Div</code> <p>html.Div: Div containing the first chart or table for the section.</p>"},{"location":"reference/tabs/general_tab/#tabs.general_tab.generate_page.format_second_display","title":"<code>format_second_display()</code>","text":"<p>Formats the second chart or table for the section.</p> <p>Returns:</p> Type Description <code>Div</code> <p>html.Div: Div containing the second chart or table for the section.</p>"},{"location":"reference/tabs/general_tab/#tabs.general_tab.generate_page.format_text","title":"<code>format_text()</code>","text":"<p>Formats the text of the section.</p> <p>Returns:</p> Type Description <code>Div</code> <p>html.Div: Div containing the text of the section.</p>"},{"location":"reference/tabs/general_tab/#tabs.general_tab.generate_page.format_title","title":"<code>format_title()</code>","text":"<p>Formats the title of the section.</p> <p>Returns:</p> Type Description <code>Div</code> <p>html.Div: Div containing the title of the section.</p>"},{"location":"reference/tabs/general_tab/#tabs.general_tab.generate_page.render_section","title":"<code>render_section()</code>","text":"<p>Renders the tab section.</p> <p>Returns:</p> Type Description <code>Div</code> <p>html.Div: Div containing the tab section.</p>"},{"location":"reference/tabs/general_tab/#tabs.general_tab.tab_info","title":"<code>tab_info(tab_title)</code>","text":"<p>Returns the information for the tab.</p> <p>Parameters:</p> Name Type Description Default <code>tab_title</code> <code>str</code> <p>Title of the tab.</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Dictionary containing the information for the tab.</p>"},{"location":"reference/tabs/overview_tab/","title":"Overview tab","text":""},{"location":"reference/tabs/overview_tab/#tabs.overview_tab.render","title":"<code>render()</code>","text":"<p>Renders the overview tab.</p> <p>Returns:</p> Type Description <code>Div</code> <p>html.Div: Div containing the layout for the overview tab.</p>"},{"location":"reference/tabs/overview_tab/#tabs.overview_tab.selected","title":"<code>selected(n, table_data_selected)</code>","text":"<p>Returns the selected rows from the table.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>bool</code> <p>The number of clicks.</p> required <code>table_data_selected</code> <code>list[dict[str, str]]</code> <p>The selected rows from the table.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The selected rows as a string.</p>"},{"location":"reference/tabs/overview_tab/#tabs.overview_tab.update_dropdown","title":"<code>update_dropdown(energy_type)</code>","text":"<p>Updates the dropdown options based on the energy type selected.</p> <p>Parameters:</p> Name Type Description Default <code>energy_type</code> <code>str</code> <p>The selected energy type.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple[list[dict[str, str]], str]</code> <p>Tuple containing the new options and the default value.</p>"},{"location":"reference/tabs/overview_tab/#tabs.overview_tab.update_table_and_barplot","title":"<code>update_table_and_barplot(utility, selected_dropdown_value)</code>","text":"<p>Updates the figure and table based on the selected filters.</p> <p>Parameters:</p> Name Type Description Default <code>utility</code> <code>str</code> <p>The utility selected.</p> required <code>selected_dropdown_value</code> <code>str</code> <p>The selected dropdown value.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple</code> <p>Tuple containing the figure, table and patched grid.</p>"},{"location":"reference/tabs/power_tab/","title":"Power tab","text":""},{"location":"reference/tabs/power_tab/#tabs.power_tab.render","title":"<code>render()</code>","text":"<p>Renders the power tab.</p> <p>Returns:</p> Type Description <code>Div</code> <p>html.Div: Div containing the layout for the power tab.</p>"},{"location":"reference/tabs/power_tab/#tabs.power_tab.selected_peak_power_points","title":"<code>selected_peak_power_points(n, table_data_selected)</code>","text":"<p>Returns the selected peak power points.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>The number of clicks.</p> required <code>table_data_selected</code> <code>list[dict[str, str]]</code> <p>The selected table data.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The selected peak power points as a string.</p>"},{"location":"reference/tabs/power_tab/#tabs.power_tab.selected_power_demand_info","title":"<code>selected_power_demand_info(n, table_data_selected)</code>","text":"<p>Returns the selected power demand information.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>The number of clicks.</p> required <code>table_data_selected</code> <code>list[dict[str, str]]</code> <p>The selected table data.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The selected power demand information as a string.</p>"},{"location":"reference/tabs/power_tab/#tabs.power_tab.update_peak_dropdown_options","title":"<code>update_peak_dropdown_options(table_data)</code>","text":"<p>Updates the dropdown options based on the table data.</p> <p>Parameters:</p> Name Type Description Default <code>table_data</code> <code>DataFrame</code> <p>The table data.</p> required <p>Returns:</p> Type Description <code>tuple[list[dict[str, str]], str]</code> <p>tuple[list[dict[str, str]], str]: The dropdown options and the default value.</p>"},{"location":"reference/tabs/power_tab/#tabs.power_tab.update_peak_dropdown_value","title":"<code>update_peak_dropdown_value(available_options)</code>","text":"<p>Updates the dropdown value based on the available options.</p> <p>Parameters:</p> Name Type Description Default <code>available_options</code> <code>list[dict[str, str]]</code> <p>The available options.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The dropdown value.</p>"},{"location":"reference/tabs/power_tab/#tabs.power_tab.update_power_lineplot","title":"<code>update_power_lineplot(selected_date, selected_id)</code>","text":"<p>Updates the figure based on the selected filters.</p> <p>Parameters:</p> Name Type Description Default <code>selected_date</code> <code>datetime</code> <p>The selected date.</p> required <code>selected_id</code> <code>str</code> <p>The selected meter ID.</p> required <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: Plotly figure object.</p>"},{"location":"reference/tabs/power_tab/#tabs.power_tab.update_table_and_barplot","title":"<code>update_table_and_barplot(selected_id, selected_years)</code>","text":"<p>Updates the figure and table based on the selected filters.</p> <p>Parameters:</p> Name Type Description Default <code>selected_id</code> <code>str</code> <p>The selected meter ID.</p> required <code>selected_years</code> <code>list[int]</code> <p>The selected years.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple</code> <p>The table data and figure.</p>"},{"location":"reference/utils/IDS/","title":"IDS","text":""},{"location":"reference/utils/page_text/","title":"Page text","text":""},{"location":"reference/utils/schema/","title":"Schema","text":""}]}